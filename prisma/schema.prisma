generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Supplier Model
model Supplier {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @default("")
  slug      String    @default("") 
  logo      String? // Logo URL for branding (optional)
  email     String    @default("")
  phone     String    @default("")
  address   String    @default("")
  type      String    @default("company")
  products  Product[] // Explicit many-to-many relationship
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Product Model
model Product {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String   @default("")
  slug       String   @default("") 
  price      Float    @default(0)
  size       String?
  details    String?
  imageUrl   String?
  supplierId String   @db.ObjectId
  type       String   @default("product")
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  published  Boolean @default(false) // Add this field
  outOfStock Boolean @default(false) // Add this field

  orderItems OrderItem[] // A product can belong to multiple order items
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId // Explicitly define as ObjectId
  phone         String?         @unique
  name          String?
  email         String?        
  emailVerified DateTime?       @map("email_verified")
  password      String?
  image     String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
   

  latitude  String  @default("")
  longitude String  @default("")
  address   String? @default("")
  role      String  @default("")
  isOtp     Boolean @default(false)
   isOauth   Boolean   @default(false)
  otpCode   String? @default("")
  orders    Order[] // List of orders associated with the user


  Notification Notification[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

 

 

 

model Order {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId // Explicitly define as ObjectId
  orderNumber   String  @unique
  customerId    String  @db.ObjectId // Reference to the user who placed the order
  customer      User    @relation(fields: [customerId], references: [id]) // Relation to the User model
  customerName  String?
  driverId      String? @db.ObjectId // Changed to ObjectId type
  driver        Driver? @relation(fields: [driverId], references: [id]) // New relation
  latitude      String?
  longitude     String?
  status        String  @default("Pending")
  isTripStart   Boolean @default(false) // true if trip start -- false on cancel or delever
  amount        Float   @default(0)
  discount      Float?  @default(0) // Optional discount per order
  resonOfcancel String? @default("")

  items      OrderItem[]
  orderInWay OrderInWay? // علاقة واحد لواحد (طلبية واحدة ← تتبع واحد)
  shiftId    String      @db.ObjectId // Ensure this matches Shift.id's native type
  shift      Shift       @relation(fields: [shiftId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId // Explicitly define as ObjectId
  orderId   String  @db.ObjectId // Ensure this matches the type of Order.id
  productId String  @db.ObjectId
  quantity  Int     @default(0)
  price     Float   @default(0)
  order     Order?   @relation(fields: [orderId], references: [id])
  product   Product? @relation(fields: [productId], references: [id]) // Link to Product
}

// Driver Model
model Driver {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @default("")
  email      String      @default("")
  phone      String      @default("")
  imageUrl   String?     @default("")
  password   String?     @default("")
  orders     Order[] // One-to-many relationship with Order
  orderInWay OrderInWay? // تغيير من array إلى optional واحد
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderInWay {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String   @unique @db.ObjectId // أضفنا @unique هنا
  order       Order    @relation(fields: [orderId], references: [id])
  driverId    String   @unique @db.ObjectId // أضفنا @unique هنا
  driver      Driver   @relation(fields: [driverId], references: [id])
  orderNumber String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([orderId, driverId])
}

// LocationHistory Model
model LocationHistory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  driverId  String
  orderId   String?
  latitude  Float // Latitude of the location
  longitude Float // Longitude of the location
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Promotion Model
model Promotion {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String   @default("")
  description  String   @default("")
  imageUrl     String? // Optional image URL for promotional material
  price        Float? // Price of the promotion (optional)
  discoutPrice Float? // Price of the promotion (optional)
  active       Boolean  @default(true) // Whether the promotion is active
  productIds   String[] @db.ObjectId // Links to Products (many-to-many relationship)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model Counter {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  key     String @unique // A unique key to identify the counter (e.g., "order_counter")
  counter Int    @default(0)
}

model Shift {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  name      String   @default("")
  startTime String   @default("")
  endTime   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orders Order[] // An order belongs to a specific shift
}

model Company {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  fullName       String   @default("") // Full name of the company owner/contact person
  email          String   @default("") // Email address
  phoneNumber    String   @default("") // Phone number
  whatsappNumber String   @default("") // WhatsApp number
  logo           String   @default("") // Profile picture URL
  profilePicture String   @default("") // Profile picture URL
  bio            String   @default("") // Bio/description
  taxNumber      String   @default("") // Tax number
  taxQrImage     String   @default("") // URL of the tax QR image
  twitter        String   @default("") // Twitter URL
  linkedin       String   @default("") // LinkedIn URL
  instagram      String   @default("") // Instagram URL
  tiktok         String   @default("") // TikTok URL
  facebook       String   @default("") // Facebook URL
  snapchat       String   @default("") // Snapchat URL
  website        String   @default("") // Website URL
  address        String   @default("") // Address of the company
  latitude       String   @default("") // Latitude of the company location
  longitude      String   @default("") // Longitude of the company location
  createdAt      DateTime @default(now()) // Timestamp of creation
  updatedAt      DateTime @updatedAt // Timestamp of last update
}

model NewLetter {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  createdAt DateTime @default(now())
}

model ContactSubmission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  replies   Reply[] // One-to-many relationship: one submission can have multiple replies
}

model Reply {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  content             String // The reply message
  sentAt              DateTime          @default(now()) // Timestamp for when the reply was sent
  contactSubmissionId String            @db.ObjectId // Ensure this matches the native type of ContactSubmission.id
  contactSubmission   ContactSubmission @relation(fields: [contactSubmissionId], references: [id])
}

model Changelog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  subject   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // Timestamp of last update
}

model Term {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("terms")
}

model GlobalSEO {
  /// المُعرِّف الفريد للصفحة (يتم توليده تلقائيًا)
  id String @id @default(auto()) @map("_id") @db.ObjectId

  /// رقم تعريف المحتوى الفريد (مرتبط بالنموذج الرئيسي)
  entityId String @unique

  /// نوع الصناعة (مياه، أغذية، ملابس...)
  industryType IndustryType @default(WATER)

  // ---------------------------
  // أساسيات SEO
  // ---------------------------
  /// عنوان الصفحة (الحد الأقصى 120 حرفًا)
  metaTitle String @default("")

  /// وصف الصفحة (الحد الأقصى 320 حرفًا)
  metaDescription String @default("")

  /// الرابط الأساسي للصفحة (Canonical URL)
  canonicalUrl String?

  /// إعدادات روبوتات البحث (مثال: noindex, nofollow)
  robots String @default("index, follow")

  /// الكلمات المفتاحية للصفحة
  keywords String[]

  // ---------------------------
  // بيانات مدمجة (Embedded Documents)
  // ---------------------------
  /// إعدادات وسائل التواصل الاجتماعي
  socialMedia SocialMedia

  /// إعدادات SEO التقنية
  technicalSEO TechnicalSEO

  /// إعدادات الترجمة واللغات
  localization Localization

  /// بيانات schema.org (JSON-LD)
  schemaOrg Json?

  // ---------------------------
  // بيانات خاصة بالصناعة
  // ---------------------------
  /// بيانات مخصصة لكل صناعة (JSON مرن)
  industryData Json?    @db.Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("seo_entries")
}

 
type SocialMedia {
  /// عنوان Open Graph
  openGraphTitle String?

  /// صور Open Graph (مصفوفة JSON)
  openGraphImages Json?

  /// نوع بطاقة تويتر
  twitterCardType String?

  /// صور تويتر (مصفوفة JSON)
  twitterImages Json?
}

type TechnicalSEO {
  /// عنواين الأمان (مثال: X-Content-Type-Options)
  securityHeaders String[] @default(["X-Content-Type-Options: nosniff"])

  /// أصول يتم تحميلها مسبقًا
  preloadAssets String[]

  /// إعدادات HTTP-Equiv
  httpEquiv String[] @default(["content-language: ar-SA"])
}

/// إعدادات الترجمة واللغات
type Localization {
  /// روابط hreflang (JSON)
  hreflang Json?

  /// اللغة الافتراضية
  defaultLanguage String @default("ar-SA")

  /// اللغات المدعومة
  supportedLanguages String[]
}

// ---------------------------
// أنواع الصناعات (Enum)
// ---------------------------
enum IndustryType {
  /// شركات المياه
  WATER

  /// شركات الأغذية
  FOOD

  /// شركات الملابس
  CLOTHING

  /// شركات الإلكترونيات
  ELECTRONICS

  /// صناعات أخرى
  OTHER
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  message     String   @default("") // The notification message
  type        String   @default("order") // Type of notification (e.g., info, success, error)
  status      String   @default("unread") // Status of the notification (e.g., unread, read)
  userId      String?  @db.ObjectId // Optional reference to the user receiving the notification
  user        User?    @relation(fields: [userId], references: [id]) // Relation to the User model
  createdAt   DateTime @default(now()) // Timestamp of creation
  updatedAt   DateTime @updatedAt // Timestamp of last update
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  requestId String   @db.ObjectId

}

model Request {
   id          String   @id @default(auto()) @map("_id") @db.ObjectId // MongoDB ObjectId
  title       String      // عنوان الطلب
  description String      // وصف الطلب
  status      RequestStatus @default(PENDING)
  type        RequestType // نوع الطلب
  createdBy   String      // اسم أو بريد العميل
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  attachment  String?     // رابط مرفق (اختياري)
}
model CommentTechno {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  createdBy  String
  createdAt  DateTime @default(now())
  requestId  String   @db.ObjectId
  // Optionally: isAdmin Boolean
}

enum RequestStatus {
  PENDING      // قيد الانتظار
  IN_PROGRESS  // قيد التنفيذ
  DONE         // تم التنفيذ
  REJECTED     // مرفوض
}

enum RequestType {
  BUG         // مشكلة
  FEATURE     // طلب جديد
  IMPROVEMENT // تعديل
}

model SupportPing {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  message   String
  timestamp DateTime @default(now())
}

// Expense Model
model Expense {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float    // قيمة المصروف
  note      String?  // وصف أو ملاحظة
  category  String?  // تصنيف المصروف (اختياري)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?  // المستخدم الذي أضاف المصروف
}