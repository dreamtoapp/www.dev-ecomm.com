Certainly! Below is the **full, well-structured prompt** using **Prompt Engineering principles**, incorporating all the details we’ve discussed so far. This includes a clear breakdown of roles, tasks, specifics, context, examples, and notes, along with the detailed technology stack.

---

### **Prompt Engineering Structure**

---

### **1. Role**
**Define the role of the AI in this task:**
- You are an expert software engineer specializing in building modern web applications tailored for the **Saudi Arabian market**.
- Your task is to design and implement a user-friendly e-commerce store management system that adheres to local preferences, language requirements, and cultural norms.
- The application must be intuitive, responsive, and optimized for users in Saudi Arabia, ensuring seamless navigation and functionality.

---

### **2. Task**
**What needs to be done?**
- Build a fully functional e-commerce store management system specifically designed for users in Saudi Arabia. The system should include:
  1. **Frontend**:
     - Product page with search, filter, and sorting options.
     - Shopping cart with local storage integration.
     - Multi-language support (Arabic as the primary language and English as a secondary option) using **next-intl**.
     - Social sharing buttons for products using **react-share**.
     - A slider for displaying promotions using **shadcn/ui**.
     - Real-time driver tracking on a street map using **Leaflet.js** and **OpenStreetMap**, with locations relevant to Saudi Arabia (e.g., Riyadh, Jeddah, Dammam).
  2. **Backend**:
     - Use **Server Actions** instead of APIs for handling product, order, and user management.
     - Implement authentication using **Next-Auth** with **Prisma Adapter**.
     - Send electronic invoices via email using **Nodemailer**.
     - Generate PDF invoices using **PDFKit** or **jsPDF**.
  3. **Database**:
     - Design MongoDB schemas using **Prisma** for companies, products, orders, and users.
  4. **Admin Dashboard**:
     - Add/modify/delete products, promotions, and orders.
     - Manage stock availability by marking products as "Out of Stock."
  5. **Driver Dashboard**:
     - Display assigned orders and update their status (In Delivery, Delivered).
     - Show real-time location on the map with Saudi Arabian cities and regions.

---

### **3. Specifics**
**Detailed requirements for each feature:**

#### **A. Frontend**
1. **Product Page**:
   - Display companies and products with images, prices, and descriptions.
   - Add a search bar and filters (by company, size, price).
   - Ensure the page is SEO-friendly using **Server-Side Rendering (SSR)**.
   - Optimize for Arabic language readability (right-to-left text alignment).
2. **Shopping Cart**:
   - Use **React Context** to manage the cart state.
   - Save cart data in **Local Storage** for persistence.
   - Ensure the shopping cart is intuitive and easy to use for Saudi customers.
3. **Promotions Slider**:
   - Use **shadcn/ui** to create a responsive and visually appealing slider.
   - Each promotion should include:
     - Image, title, short description, and a "Shop Now" button.
   - Promotions should be culturally relevant to Saudi users (e.g., Ramadan offers, seasonal discounts).
4. **Driver Tracking Map**:
   - Use **Leaflet.js** with **OpenStreetMap** tiles.
   - Add markers for the driver's current location and the customer's delivery location.
   - Focus on Saudi Arabian cities and regions (e.g., Riyadh, Jeddah, Dammam, Makkah, Madinah).
   - Ensure the map is fully responsive and styled with **Tailwind CSS**.
5. **Multi-Language Support**:
   - Use **next-intl** to add Arabic (primary) and English (secondary) language options.
   - Provide translations for all static text, ensuring proper Arabic grammar and cultural relevance.

#### **B. Backend**
1. **Server Actions**:
   - Handle CRUD operations for products, promotions, and orders.
   - Use **Next-Auth** for secure authentication.
   - Ensure all backend logic is optimized for performance and scalability.
2. **Email Notifications**:
   - Send electronic invoices via email using **Nodemailer**.
   - Generate PDF invoices using **PDFKit** or **jsPDF**.
   - Ensure emails are formatted professionally and include Arabic text where necessary.
3. **Database Models**:
   - Define Prisma models for:
     - Companies: Name, logo, description.
     - Products: Name, company, size, price, image, stock status.
     - Promotions: Title, description, start/end date, active status.
     - Orders: Details, status (Pending, In Delivery, Delivered), customer association.
     - Users: Name, email, password, role (customer/driver).

#### **C. Admin Dashboard**
1. Add/Modify/Delete products and promotions.
2. Mark products as "Out of Stock."
3. View and update order statuses.
4. Ensure the dashboard is simple and intuitive for Saudi business owners.

#### **D. Driver Dashboard**
1. Display assigned orders.
2. Update order status (In Delivery, Delivered).
3. Show real-time location on the map with Saudi Arabian city names.

---

### **4. Context**
**Why is this being done?**
- The goal is to create a modern, scalable, and user-friendly e-commerce platform tailored for the **Saudi Arabian market**.
- The system should cater to both customers and administrators, providing seamless navigation, real-time updates, and robust backend functionality.
- The project must avoid unnecessary costs (e.g., no paid APIs like Google Maps) while maintaining high-quality design and performance.
- The application should respect local cultural norms, language preferences, and ease of use for Saudi users.

---

### **5. Examples**
**Provide examples to clarify expectations:**

#### **Example 1: Shopping Cart Component**
```tsx
// components/CartProvider.tsx
import { createContext, useContext, useState } from 'react';

const CartContext = createContext();

export const CartProvider = ({ children }) => {
  const [cartItems, setCartItems] = useState([]);

  const addItem = (item) => {
    setCartItems((prev) => [...prev, item]);
  };

  const removeItem = (id) => {
    setCartItems((prev) => prev.filter((item) => item.id !== id));
  };

  return (
    <CartContext.Provider value={{ cartItems, addItem, removeItem }}>
      {children}
    </CartContext.Provider>
  );
};

export const useCart = () => useContext(CartContext);
```

#### **Example 2: Leaflet Map Component**
```tsx
// components/MapComponent.tsx
'use client';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';

export default function MapComponent({ driverLocation, customerLocation }) {
  return (
    <MapContainer center={[24.7136, 46.6753]} zoom={13} style={{ height: '400px', width: '100%' }}>
      <TileLayer
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      />
      <Marker position={driverLocation}>
        <Popup>موقع السائق</Popup>
      </Marker>
      <Marker position={customerLocation}>
        <Popup>موقع العميل</Popup>
      </Marker>
    </MapContainer>
  );
}
```

---

### **6. Technology Stack**
**Detailed breakdown of technologies and their roles:**

1. **Frontend**:
   - **Next.js 15**: Core framework for frontend and backend.
   - **React Context**: Global state management.
   - **Tailwind CSS**: Styling with a utility-first approach.
   - **shadcn/ui**: Pre-built UI components for sliders, buttons, etc.
   - **next-intl**: Multi-language support (Arabic and English).
   - **react-share**: Social sharing buttons.
   - **Leaflet.js + OpenStreetMap**: Interactive street map for driver tracking.
   - **Web Push API**: In-app notifications.

2. **Backend**:
   - **Next.js Server Actions**: Backend logic without separate APIs.
   - **Next-Auth**: User authentication with Prisma Adapter.
   - **Prisma**: Database schema and query management.
   - **MongoDB**: NoSQL database for storing application data.
   - **Nodemailer**: Sending emails with attachments.
   - **PDFKit or jsPDF**: Generating PDF invoices.

3. **Additional Tools**:
   - **Mock Data**: Testing the application with sample data.
   - **Local Storage**: Persisting shopping cart data locally.

---

### **7. Notes**
**Additional instructions for clarity:**
1. **Responsive Design**: Ensure all components are fully responsive using **Tailwind CSS**.
2. **Documentation**: Document every part of the code, including explanations for functions, components, and database schemas.
3. **Clean Code**: Follow best practices for writing clean, modular, and reusable code.
4. **Mock Data**: Use mock data for testing purposes (e.g., GPS coordinates for Saudi Arabian cities, sample products, and promotions).
5. **SEO Optimization**: Use **SSR** wherever possible to improve search engine visibility.
6. **Avoid Complexity**: Keep the implementation simple and avoid over-engineering.
7. **Cultural Relevance**: Ensure all content, promotions, and features are culturally appropriate for Saudi users.
8. **Language Preference**: Prioritize Arabic as the primary language and ensure proper right-to-left (RTL) text alignment.

---

### **Final Output Requirements**
1. Fully functional Next.js 15 project with all features implemented.
2. Clean, well-documented, and maintainable code.
3. Responsive design that works seamlessly on all devices.
4. Integration of **Leaflet.js** and **OpenStreetMap** for the street map, with Saudi Arabian locations.
5. Mock data for testing all features, including GPS coordinates for major Saudi cities.
6. Arabic-first design with proper RTL support and culturally relevant content.

---



Understood! If **next-intl** (for multi-language support) is not required in the initial version (**v0**) and will be implemented later, we can adjust the prompt accordingly. Below is the updated, well-structured prompt without **next-intl**, while keeping everything else intact.

---

### **Prompt Engineering Structure**

---

### **1. Role**
**Define the role of the AI in this task:**
- You are an expert software engineer specializing in building modern web applications tailored for the **Saudi Arabian market**.
- Your task is to design and implement a user-friendly e-commerce store management system that adheres to local preferences and cultural norms.
- The application must be intuitive, responsive, and optimized for users in Saudi Arabia, ensuring seamless navigation and functionality.

---

### **2. Task**
**What needs to be done?**
- Build a fully functional e-commerce store management system specifically designed for users in Saudi Arabia. The system should include:
  1. **Frontend**:
     - Product page with search, filter, and sorting options.
     - Shopping cart with local storage integration.
     - Social sharing buttons for products using **react-share**.
     - A slider for displaying promotions using **shadcn/ui**.
     - Real-time driver tracking on a street map using **Leaflet.js** and **OpenStreetMap**, with locations relevant to Saudi Arabia (e.g., Riyadh, Jeddah, Dammam).
  2. **Backend**:
     - Use **Server Actions** instead of APIs for handling product, order, and user management.
     - Implement authentication using **Next-Auth** with **Prisma Adapter**.
     - Send electronic invoices via email using **Nodemailer**.
     - Generate PDF invoices using **PDFKit** or **jsPDF**.
  3. **Database**:
     - Design MongoDB schemas using **Prisma** for companies, products, orders, and users.
  4. **Admin Dashboard**:
     - Add/modify/delete products, promotions, and orders.
     - Manage stock availability by marking products as "Out of Stock."
  5. **Driver Dashboard**:
     - Display assigned orders and update their status (In Delivery, Delivered).
     - Show real-time location on the map with Saudi Arabian cities and regions.

---

### **3. Specifics**
**Detailed requirements for each feature:**

#### **A. Frontend**
1. **Product Page**:
   - Display companies and products with images, prices, and descriptions.
   - Add a search bar and filters (by company, size, price).
   - Ensure the page is SEO-friendly using **Server-Side Rendering (SSR)**.
2. **Shopping Cart**:
   - Use **React Context** to manage the cart state.
   - Save cart data in **Local Storage** for persistence.
   - Ensure the shopping cart is intuitive and easy to use for Saudi customers.
3. **Promotions Slider**:
   - Use **shadcn/ui** to create a responsive and visually appealing slider.
   - Each promotion should include:
     - Image, title, short description, and a "Shop Now" button.
   - Promotions should be culturally relevant to Saudi users (e.g., Ramadan offers, seasonal discounts).
4. **Driver Tracking Map**:
   - Use **Leaflet.js** with **OpenStreetMap** tiles.
   - Add markers for the driver's current location and the customer's delivery location.
   - Focus on Saudi Arabian cities and regions (e.g., Riyadh, Jeddah, Dammam, Makkah, Madinah).
   - Ensure the map is fully responsive and styled with **Tailwind CSS**.
5. **Social Sharing Buttons**:
   - Use **react-share** to allow users to share product links on platforms like WhatsApp, Facebook, and Twitter.

#### **B. Backend**
1. **Server Actions**:
   - Handle CRUD operations for products, promotions, and orders.
   - Use **Next-Auth** for secure authentication.
   - Ensure all backend logic is optimized for performance and scalability.
2. **Email Notifications**:
   - Send electronic invoices via email using **Nodemailer**.
   - Generate PDF invoices using **PDFKit** or **jsPDF**.
   - Ensure emails are formatted professionally.
3. **Database Models**:
   - Define Prisma models for:
     - Companies: Name, logo, description.
     - Products: Name, company, size, price, image, stock status.
     - Promotions: Title, description, start/end date, active status.
     - Orders: Details, status (Pending, In Delivery, Delivered), customer association.
     - Users: Name, email, password, role (customer/driver).

#### **C. Admin Dashboard**
1. Add/Modify/Delete products and promotions.
2. Mark products as "Out of Stock."
3. View and update order statuses.
4. Ensure the dashboard is simple and intuitive for Saudi business owners.

#### **D. Driver Dashboard**
1. Display assigned orders.
2. Update order status (In Delivery, Delivered).
3. Show real-time location on the map with Saudi Arabian city names.

---

### **4. Context**
**Why is this being done?**
- The goal is to create a modern, scalable, and user-friendly e-commerce platform tailored for the **Saudi Arabian market**.
- The system should cater to both customers and administrators, providing seamless navigation, real-time updates, and robust backend functionality.
- The project must avoid unnecessary costs (e.g., no paid APIs like Google Maps) while maintaining high-quality design and performance.
- Multi-language support (Arabic and English) will be added in a future update.

---

### **5. Examples**
**Provide examples to clarify expectations:**

#### **Example 1: Shopping Cart Component**
```tsx
// components/CartProvider.tsx
import { createContext, useContext, useState } from 'react';

const CartContext = createContext();

export const CartProvider = ({ children }) => {
  const [cartItems, setCartItems] = useState([]);

  const addItem = (item) => {
    setCartItems((prev) => [...prev, item]);
  };

  const removeItem = (id) => {
    setCartItems((prev) => prev.filter((item) => item.id !== id));
  };

  return (
    <CartContext.Provider value={{ cartItems, addItem, removeItem }}>
      {children}
    </CartContext.Provider>
  );
};

export const useCart = () => useContext(CartContext);
```

#### **Example 2: Leaflet Map Component**
```tsx
// components/MapComponent.tsx
'use client';
import { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';

export default function MapComponent({ driverLocation, customerLocation }) {
  return (
    <MapContainer center={[24.7136, 46.6753]} zoom={13} style={{ height: '400px', width: '100%' }}>
      <TileLayer
        url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      />
      <Marker position={driverLocation}>
        <Popup>موقع السائق</Popup>
      </Marker>
      <Marker position={customerLocation}>
        <Popup>موقع العميل</Popup>
      </Marker>
    </MapContainer>
  );
}
```

---

### **6. Technology Stack**
**Detailed breakdown of technologies and their roles:**

1. **Frontend**:
   - **Next.js 15**: Core framework for frontend and backend.
   - **React Context**: Global state management.
   - **Tailwind CSS**: Styling with a utility-first approach.
   - **shadcn/ui**: Pre-built UI components for sliders, buttons, etc.
   - **react-share**: Social sharing buttons.
   - **Leaflet.js + OpenStreetMap**: Interactive street map for driver tracking.
   - **Web Push API**: In-app notifications.

2. **Backend**:
   - **Next.js Server Actions**: Backend logic without separate APIs.
   - **Next-Auth**: User authentication with Prisma Adapter.
   - **Prisma**: Database schema and query management.
   - **MongoDB**: NoSQL database for storing application data.
   - **Nodemailer**: Sending emails with attachments.
   - **PDFKit or jsPDF**: Generating PDF invoices.

3. **Additional Tools**:
   - **Mock Data**: Testing the application with sample data.
   - **Local Storage**: Persisting shopping cart data locally.

---

### **7. Notes**
**Additional instructions for clarity:**
1. **Responsive Design**: Ensure all components are fully responsive using **Tailwind CSS**.
2. **Documentation**: Document every part of the code, including explanations for functions, components, and database schemas.
3. **Clean Code**: Follow best practices for writing clean, modular, and reusable code.
4. **Mock Data**: Use mock data for testing purposes (e.g., GPS coordinates for Saudi Arabian cities, sample products, and promotions).
5. **SEO Optimization**: Use **SSR** wherever possible to improve search engine visibility.
6. **Avoid Complexity**: Keep the implementation simple and avoid over-engineering.
7. **Cultural Relevance**: Ensure all content, promotions, and features are culturally appropriate for Saudi users.
8. **Multi-Language Support**: Arabic and English language support will be added in a future update.

---

### **Final Output Requirements**
1. Fully functional Next.js 15 project with all features implemented.
2. Clean, well-documented, and maintainable code.
3. Responsive design that works seamlessly on all devices.
4. Integration of **Leaflet.js** and **OpenStreetMap** for the street map, with Saudi Arabian locations.
5. Mock data for testing all features, including GPS coordinates for major Saudi cities.
6. Culturally relevant content and design tailored for Saudi users.

 
