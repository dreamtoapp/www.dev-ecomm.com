بالطبع! إليك النسخة الأخيرة من البرومبت باللغة العربية، مع التركيز على إضافة خريطة الشوارع باستخدام **Leaflet.js** و**OpenStreetMap**. البرومبت مصمم ليكون واضحًا ومفصلًا لضمان تنفيذ المشروع بشكل صحيح.

---

### **البرومبت النهائي بالعربي**

"قم بإنشاء مشروع نظام إدارة متجر إلكتروني باستخدام **Next.js 15** مع **Server Actions** بدلاً من واجهات برمجة التطبيقات (API). استخدم **Next-Auth** مع **Prisma Adapter** للتعامل مع المصادقة، و**MongoDB** كقاعدة بيانات. يجب أن يكون المشروع متجاوبًا بالكامل (Fully Responsive)، موثقًا بشكل جيد (Well-Documented)، نظيفًا (Clean Code)، وسهل الصيانة (Maintainable). تجنب التعقيد قدر الإمكان وركز على البساطة والوضوح. يجب أن يشمل المشروع الميزات التالية:

---

### **1. الواجهة الأمامية (Frontend):**

#### **أ. قسم العروض:**
   - أضف قسمًا مخصصًا للعروض على الصفحة الرئيسية.
   - عرض العروض بشكل **سلايدر (Slider)** جذاب باستخدام مكتبة **shadcn/ui** لتصميم واجهة مستخدم جميلة ومتجاوبة.
   - كل عرض يحتوي على:
     - صورة العرض.
     - عنوان العرض.
     - وصف قصير.
     - زر 'تسوق الآن' يقود إلى صفحة المنتجات المرتبطة بالعرض.
   - راعِ تحسين محركات البحث (SEO) لكل عرض باستخدام **Server-Side Rendering (SSR)** لضمان ظهور العروض في نتائج البحث.
   - إذا كانت هناك حاجة لتحديث العروض ديناميكيًا (مثل تغيير العروض بناءً على الموقع أو الوقت)، استخدم **Client-Side Rendering (CSR)**.

#### **ب. باقي الميزات:**
   - صفحة رئيسية تعرض الشركات والمنتجات مع صور وأسعار وأوصاف.
   - شريط بحث وخاصية فلترة حسب الشركة، الحجم، أو السعر.
   - عربة تسوق تدعم إضافة المنتجات، تعديل الكميات، وإزالة المنتجات.
     - استخدم **React Context** لإدارة حالة عربة التسوق.
     - استخدم **Local Storage** لحفظ بيانات عربة التسوق بحيث يمكن للعميل استرجاعها عند زيارة الموقع لاحقًا.
   - دعم متعدد اللغات (العربية والإنجليزية) باستخدام **next-intl**.
   - زر مشاركة المنتجات على وسائل التواصل الاجتماعي باستخدام **react-share**.
   - نظام إشعارات داخل التطبيق باستخدام **Web Push API**.

#### **ج. خريطة الشوارع لتتبع المندوب:**
   - قم بتضمين **خريطة شوارع** باستخدام **Leaflet.js** مع **OpenStreetMap** كمزود للطبقات المجانية.
   - عرض موقع المندوب الحالي على الخريطة في الوقت الفعلي باستخدام بيانات تجريبية (Mock GPS Coordinates).
   - أضف علامة (Marker) لموقع المندوب وعلامة أخرى لموقع العميل.
   - تأكد من أن الخريطة متجاوبة بالكامل (Responsive) وتعمل على جميع الأجهزة (الهواتف الذكية، الأجهزة اللوحية، وأجهزة الكمبيوتر).
   - استخدم **Tailwind CSS** لتصميم واجهة الخريطة وجعلها متوافقة مع تصميم التطبيق.
   - إذا كنت بحاجة إلى عرض المسار بين موقع المندوب وموقع العميل، يمكنك استخدام مكتبة **Leaflet Routing Machine** (اختياري).

---

### **2. لوحة تحكم صاحب المتجر (Admin Dashboard):**

#### **أ. إدارة العروض:**
   - إضافة/تعديل/حذف العروض.
   - تفعيل أو إيقاف العروض بسهولة.
   - كل عرض يتضمن:
     - صورة العرض.
     - عنوان العرض.
     - وصف قصير.
     - تاريخ بداية ونهاية العرض.
     - حالة العرض (نشط/غير نشط).

#### **ب. باقي الميزات:**
   - إضافة/تعديل/حذف الشركات والمنتجات.
   - وضع علامة 'نفذت الكمية' على المنتجات غير المتاحة مؤقتًا.
   - عرض جميع الطلبات الواردة وتحديث حالاتها.

---

### **3. لوحة تحكم العميل:**
   - تتبع حالة الطلبات (قيد المراجعة، قيد التوصيل، تم التسليم).
   - إلغاء الطلبات قبل اعتمادها.
   - تقييم المندوبين بعد تسليم الطلبات.

---

### **4. لوحة تحكم السائقين:**
   - عرض الطلبات المخصصة لكل سائق.
   - تحديث حالة الطلب (قيد التوصيل، تم التسليم).

---

### **5. الخلفية (Backend باستخدام Server Actions):**
   - استخدم **Server Actions** بدلاً من واجهات برمجة التطبيقات (API) للتعامل مع:
     - إدارة المنتجات (CRUD: إضافة، تعديل، حذف).
     - إدارة العروض (CRUD: إضافة، تعديل، حذف، تفعيل/إيقاف).
     - إدارة الطلبات (عرض الطلبات، تحديث الحالات، إلغاء الطلبات).
     - المصادقة باستخدام **Next-Auth** مع **Prisma Adapter**.
   - إرسال الفواتير الإلكترونية عبر البريد الإلكتروني باستخدام **Nodemailer**.
   - تصميم قالب PDF بسيط للفاتورة الإلكترونية باستخدام **PDFKit** أو **jsPDF**.

---

### **6. قاعدة البيانات (MongoDB باستخدام Prisma):**
   - تصميم جداول MongoDB باستخدام **Prisma**:
     - الشركات: اسم الشركة، الشعار، وصف الشركة.
     - المنتجات: اسم المنتج، الشركة، الحجم، السعر، الصورة، وحالة 'نفذت الكمية'.
     - العروض: صورة العرض، عنوان العرض، وصف قصير، تاريخ بداية ونهاية، حالة العرض (نشط/غير نشط).
     - الطلبات: تفاصيل الطلب، حالة الطلب (قيد المراجعة، قيد التوصيل، تم التسليم)، والعميل المرتبط.
     - المستخدمين: بيانات العملاء والسائقين (الاسم، البريد الإلكتروني، كلمة المرور، الدور).

---

### **7. الأدوات التقنية:**

- **React Context**: لإدارة الحالة العامة للتطبيق (عربة التسوق، مواقع المندوبين، إلخ).
- **Tailwind CSS**: لتصميم الواجهة.
- **shadcn/ui**: لتحسين تصميم الواجهة الأمامية (مثل السلايدر والعروض).
- **Web Push API**: لنظام الإشعارات.
- **react-share**: لإضافة أزرار مشاركة المنتجات.
- **Leaflet.js**: لآلية تتبع المندوب على الخريطة (بدون تكاليف).
- **OpenStreetMap**: كمزود مجاني للطبقات لعرض خريطة الشوارع.
- **Leaflet Routing Machine** (اختياري): لعرض المسار بين موقع المندوب وموقع العميل.

---

### **8. استخدام بيانات تجريبية (Mock Data):**
   - قم بتوفير بيانات تجريبية كاملة للمشروع بما في ذلك:
     - شركات ومنتجات.
     - طلبات عملاء.
     - مواقع المندوبين على الخريطة.
     - عروض مختلفة (مع تواريخ بداية ونهاية).
   - تأكد من اختبار جميع الميزات باستخدام هذه البيانات قبل ربط المشروع بالتطبيق الفعلي.

---

### **9. المخرجات المطلوبة:**
   - هيكل المشروع الكامل مع المجلدات والملفات الأساسية.
   - نماذج Prisma (Models) لقاعدة البيانات.
   - Server Actions للتعامل مع المنتجات، العروض، الطلبات، والمصادقة.
   - تصميم أولي للواجهة الأمامية (صفحة المنتجات، عربة التسوق، لوحة تحكم العميل، تتبع المندوب على الخريطة، قسم العروض).

---

### **10. ملاحظات مهمة:**
   - **Responsive Design**: يجب أن يكون المشروع متجاوبًا بالكامل مع جميع أحجام الشاشات (أجهزة الكمبيوتر، الهواتف الذكية، والأجهزة اللوحية).
   - **Documentation**: وثّق كل جزء من الكود بشكل واضح، بما في ذلك الشرح الخاص بالوظائف، المكونات، وقواعد البيانات.
   - **Clean Code**: اتبع أفضل الممارسات لكتابة كود نظيف وسهل القراءة والصيانة.
   - **Avoid Complexity**: تجنب التعقيد قدر الإمكان وركز على البساطة والوضوح.
   - **SEO Optimization**: راعِ تحسين محركات البحث (SEO) باستخدام **Server-Side Rendering (SSR)** بقدر الإمكان.
   - **Client-Side Rendering (CSR)**: استخدم CSR فقط عند الحاجة (مثل تحديث العروض ديناميكيًا).

---

### **كيفية الاستخدام:**
1. انسخ هذا البرومبت كما هو واستخدمه في الأداة التي توفر النسخة التجريبية المجانية.
2. بعد الحصول على النتيجة، راجع الهيكلية والتأكد من أنها تغطي جميع المتطلبات.
3. إذا كنت بحاجة إلى تعديلات أو توضيحات إضافية، لا تتردد في السؤال!

---

### **ملاحظات مهمة:**
- التركيز على **Responsive Design** سيضمن أن المشروع يعمل بشكل ممتاز على جميع الأجهزة.
- **Documentation** سيجعل المشروع أكثر سهولة في الفهم والصيانة.
- **Clean Code** سيضمن أن الكود سهل القراءة والتطوير في المستقبل.
- تجنب التعقيد سيجعل المشروع أكثر كفاءة وقابلية للتطوير.

إذا كان لديك أي استفسار أو تعديل آخر، أنا هنا لمساعدتك! 😊