// ملف تعريف السياق بالكامل (provider/pusherContext.tsx)
"use client";
import { createContext, useContext, useState } from "react";
import { Notification } from "@/types/notification";

type ContextType = {
  notifications: Notification[];
  markAsRead: (id: string) => void;
  markAllAsRead: () => void; // أضف هذا السطر
  unreadCount: number;
};

const NotificationsContext = createContext<ContextType>({
  notifications: [],
  markAsRead: () => {},
  markAllAsRead: () => {}, // وأضف القيمة الافتراضية هنا
  unreadCount: 0,
});

export function NotificationsProvider({
  children,
}: {
  children: React.ReactNode;
}) {
  const [notifications, setNotifications] = useState<Notification[]>([]);

  const markAsRead = (id: string) => {
    setNotifications((prev) =>
      prev.map((n) => (n.id === id ? { ...n, read: true } : n))
    );
  };

  // أضف هذه الدالة الجديدة
  const markAllAsRead = () => {
    setNotifications((prev) => prev.map((n) => ({ ...n, read: true })));
  };

  const unreadCount = notifications.filter((n) => !n.read).length;

  return (
    <NotificationsContext.Provider
      value={{
        notifications,
        markAsRead,
        markAllAsRead, // تأكد من إضافتها هنا
        unreadCount,
      }}
    >
      {children}
    </NotificationsContext.Provider>
  );
}

export const useNotifications = () => useContext(NotificationsContext);
// ملف إعداد Pusher في السيرفر (lib/pusher.ts)
// });
import PusherServer from "pusher";

export const pusher = new PusherServer({
  appId: process.env.PUSHER_APP_ID!,
  key: process.env.NEXT_PUBLIC_PUSHER_KEY!,
  secret: process.env.PUSHER_SECRET!,
  cluster: process.env.NEXT_PUBLIC_PUSHER_CLUSTER!,
  useTLS: true,
});

// أنواع الإشعارات المتاحة
export type NotificationType =
  | "message" // رسائل العملاء
  | "order" // طلبيات جديدة
  | "alert"; // تنبيهات النظام

// واجهة الإشعار الأساسية
export interface Notification {
  id: string; // المعرف الفريد
  type: NotificationType; // نوع الإشعار
  title: string; // عنوان الإشعار
  content: string; // محتوى الإشعار
  createdAt: Date; // تاريخ الإنشاء
  read: boolean; // حالة القراءة
  metadata?: {
    // بيانات إضافية (اختيارية)
    [key: string]: any; // أي بيانات إضافية حسب الحاجة
  };
}
DATABASE_URL="mongodb+srv://devnadish:Leno_1972123@cluster0.blravpl.mongodb.net/amwag?retryWrites=true&w=majority"

CLOUDINARY_CLOUD_NAME=dhyh7aufp
CLOUDINARY_API_KEY=514636716573491
CLOUDINARY_API_SECRET=dnIYjzsrvmjUhK9fLLnRaJQyz0I
CLOUDINARY_URL=cloudinary://514636716573491:dnIYjzsrvmjUhK9fLLnRaJQyz0I@dhyh7aufp
CLOUDINARY_FOLDER=amwag
CLOUDINARY_UPLOAD_PRESET_SUPPLIER=amwag_supplier
CLOUDINARY_UPLOAD_PRESET_PRODUCTS=amwag_product
CLOUDINARY_UPLOAD_PRESET_DRIVER=amwag_driver


EMAIL_USER=devnadish@gmail.com
EMAIL_PASS=gdmc gxxv eths gqgn


PUSHER_APP_ID=1946717
PUSHER_KEY=5a58b98a320f45940b0c
PUSHER_SECRET=ea7e9b152b16c6d28afd
PUSHER_CLUSTER=us2
NEXT_PUBLIC_PUSHER_KEY=5a58b98a320f45940b0c
NEXT_PUBLIC_PUSHER_CLUSTER=us2

// sunbit from client form
"use client";
import React from "react";
import { useActionState } from "react";
import { toast } from "sonner";
import { submitContactForm } from "./action/contact";

const ContactForm: React.FC = () => {
  const initialState = {
    success: false,
    message: "",
  };

  const [state, formAction, isPending] = useActionState(
    submitContactForm,
    initialState
  );

  React.useEffect(() => {
    if (state.message) {
      state.success ? toast.success(state.message) : toast.error(state.message);
    }
  }, [state]);

  return (
    <div className="max-w-2xl mx-auto p-6 bg-background shadow-lg rounded-md border dark:border-gray-800">
      <h1 className="text-3xl font-bold mb-4 text-center text-foreground">
        تواصل معنا
      </h1>
      <form action={formAction} className="space-y-4">
        <div>
          <label
            htmlFor="name"
            className="block text-sm font-medium text-foreground"
          >
            الاسم
          </label>
          <input
            type="text"
            name="name"
            id="name"
            placeholder="أدخل اسمك"
            className="mt-1 block w-full px-3 py-2 bg-background border border-input rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary"
            required
          />
        </div>

        <div>
          <label
            htmlFor="email"
            className="block text-sm font-medium text-foreground"
          >
            البريد الإلكتروني
          </label>
          <input
            type="email"
            name="email"
            id="email"
            placeholder="أدخل بريدك الإلكتروني"
            className="mt-1 block w-full px-3 py-2 bg-background border border-input rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary"
            required
          />
        </div>

        <div>
          <label
            htmlFor="subject"
            className="block text-sm font-medium text-foreground"
          >
            الموضوع
          </label>
          <input
            type="text"
            name="subject"
            id="subject"
            placeholder="أدخل الموضوع"
            className="mt-1 block w-full px-3 py-2 bg-background border border-input rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary"
            required
          />
        </div>

        <div>
          <label
            htmlFor="message"
            className="block text-sm font-medium text-foreground"
          >
            الرسالة
          </label>
          <textarea
            name="message"
            id="message"
            rows={5}
            placeholder="أدخل رسالتك"
            className="mt-1 block w-full px-3 py-2 bg-background border border-input rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-primary"
            required
          />
        </div>

        <div>
          <button
            type="submit"
            className="w-full py-2 px-4 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition disabled:opacity-50 disabled:pointer-events-none"
            disabled={isPending}
          >
            {isPending ? "جاري الإرسال..." : "إرسال الرسالة"}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ContactForm;
 // this  sublayout use for dashboard
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
import { AppSidebar } from "./(dashboard)/component/AppSidebar";
import NotificationsBell from "@/components/NotificationsBell";
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <SidebarProvider className="overflow-hidden">
      <AppSidebar />
      <SidebarTrigger />
      <main className="w-full flex-1 max-h-screen overflow-auto">
        <NotificationsBell />
        {children}
      </main>
    </SidebarProvider>
  );
}
// actions when user submit
"use server";
import { revalidatePath } from "next/cache";
import db from "../../../../lib/prisma";
import { pusher } from "../../../../lib/pusher";
import { Notification } from "@/types/notification";

export type SubmitFormState = {
  success: boolean;
  message: string;
};

export async function submitContactForm(
  prevState: SubmitFormState,
  formData: FormData
): Promise<SubmitFormState> {
  try {
    // 1. التحقق من البيانات المدخلة
    const requiredFields = ["name", "email", "subject", "message"];
    const inputData = Object.fromEntries(formData.entries());

    const missingFields = requiredFields.filter((field) => !inputData[field]);
    if (missingFields.length > 0) {
      return {
        success: false,
        message: `يرجى ملء الحقول التالية: ${missingFields.join(", ")}`,
      };
    }

    // 2. حفظ البيانات في قاعدة البيانات
    const submission = await db.contactSubmission.create({
      data: {
        name: inputData.name as string,
        email: inputData.email as string,
        subject: inputData.subject as string,
        message: inputData.message as string,
      },
    });

    // 3. إنشاء إشعار منظم
    const notification: Notification = {
      id: submission.id,
      type: "message",
      title: `رسالة جديدة من ${submission.name}`,
      content: submission.subject,
      createdAt: new Date(),
      read: false,
      metadata: {
        email: submission.email,
        fullMessage: submission.message,
        submissionId: submission.id,
      },
    };

    // 4. إرسال الإشعار عبر Pusher
    await pusher.trigger(
      "admin-notifications",
      "new-notification",
      notification
    );

    // 5. تحديث الصفحة (اختياري حسب الحاجة)
    revalidatePath("/dashboard/contact");

    return {
      success: true,
      message: "✅ تم إرسال الرسالة بنجاح! سنرد عليك قريبًا",
    };
  } catch (error) {
    console.error("❌ فشل في إرسال النموذج:", error);
    return {
      success: false,
      message: "⛔ حدث خطأ غير متوقع، يرجى المحاولة مرة أخرى لاحقًا",
    };
  }
}


